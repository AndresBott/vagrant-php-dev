# -*- mode: ruby -*-
# vi: set ft=ruby :
require "yaml"


if(File.exist?("../vagrantConfig.yaml"))
  puts 'loading ../vagrantConfig.yaml'
  v_config = YAML.load_file("../vagrantConfig.yaml")
else
  puts 'loading ./vagrantConfig.yaml'
  v_config = YAML.load_file("vagrantConfig.yaml")
end

Vagrant.configure("2") do |config|
    puts "Debian/stretch64"

    config.vm.define v_config["machine_name"] do |os|
        # os.vm.box = "debian/stretch64"
        os.vm.box = "debian/contrib-stretch64"
        #os.vm.hostname = "php-meetup-fpm"

        os.vm.provider "virtualbox" do |v|
            # set the name of the VM
            v.name = v_config["machine_name"]

            # use a linked clone of the imported machine
            v.linked_clone = true

            # use VBoxManage to make vm setting
            #v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
            v.customize ["modifyvm", :id, "--ioapic", "on"]
            v.memory = 1024
            v.cpus = 1
        end
        # os.vm.provision "shell", path: "php-fpm.bash"

    end

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    # config.vm.network "forwarded_port", guest: 80, host: 8080

    config.vm.network "forwarded_port", guest: 80, host: 8080
    config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", auto_correct: true

    config.vm.network :private_network, ip: "10.0.0.10"
    config.vm.hostname = "php-dev"
    #config.vm.network "public_network"




    # mount project src code
    # will be bind mounted in the guest later on



    #===========================================================================================================
    # Mount folders
    #===========================================================================================================
    config.vm.synced_folder v_config["main_home_mount"], "/host_project", owner: "web", group: "web", :mount_options => ["uid=1100,gid=1100"]

    if(v_config["additional_mounts"].kind_of?(Array))
      $i = 0
      while $i < v_config["additional_mounts"].length  do
        mount_defaults = {
            "host"=> nil,
            "client"=>nil,
            "uid"=>1100,
            "gid"=>1100,
            "owner"=>"web",
            "group"=>"web"
        }
        mount_parameters={}
        mount_defaults.each { |key,val|

          if (v_config["additional_mounts"][$i][key].nil?)
            mount_parameters[key] = val
          else
            mount_parameters[key] = v_config["additional_mounts"][$i][key]
          end
        }

        unless mount_parameters["host"].nil? and mount_parameters["client"].nil?
          puts("mounting dir with parameters: #{mount_parameters}")
          config.vm.synced_folder mount_parameters["host"], mount_parameters["client"], owner: mount_parameters["owner"],
                                  group: mount_parameters["group"], :mount_options => ["uid=#{mount_parameters["uid"]},gid=#{mount_parameters["gid"]}"]
        end
        $i +=1
      end
    end

    # Disable the new default behavior introduced in Vagrant 1.7, to
    # ensure that all Vagrant machines will use the same SSH key pair.
    # See https://github.com/mitchellh/vagrant/issues/5005
    # added by default ansible
    config.ssh.insert_key = false

    config.vm.provision "shell", path: "setup.bash"



end


